// <auto-generated />
using System;
using BloodDonationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationAPI.Migrations
{
    [DbContext(typeof(iDonorDbContext))]
    [Migration("20231229190853_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonationAPI.Models.Blood", b =>
                {
                    b.Property<int>("BloodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodID"));

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<string>("RhesusFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodID");

                    b.ToTable("Blood");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.BloodBank", b =>
                {
                    b.Property<int>("BloodBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodBankID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodBankID");

                    b.ToTable("BloodBank");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ClientID");

                    b.HasIndex("BloodID");

                    b.HasIndex("UserID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.DonationOperation", b =>
                {
                    b.Property<int>("DonationOperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationOperationID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransfusionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("DonationOperationID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("DonorID");

                    b.HasIndex("PatientID");

                    b.ToTable("DonationOperation");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.Client", b =>
                {
                    b.HasOne("BloodDonationAPI.Models.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.DonationOperation", b =>
                {
                    b.HasOne("BloodDonationAPI.Models.BloodBank", "BloodBank")
                        .WithMany("DonationOperations")
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationAPI.Models.Client", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationAPI.Models.Client", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("BloodBank");

                    b.Navigation("Donor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BloodDonationAPI.Models.BloodBank", b =>
                {
                    b.Navigation("DonationOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
